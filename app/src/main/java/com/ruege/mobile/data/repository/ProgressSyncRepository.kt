package com.ruege.mobile.data.repository

import android.content.Context
import android.util.Log
import androidx.lifecycle.LiveData
import androidx.room.Room
import com.ruege.mobile.data.local.AppDatabase
import com.ruege.mobile.data.local.dao.ProgressDao
import com.ruege.mobile.data.local.dao.ProgressSyncQueueDao
import com.ruege.mobile.data.local.entity.ProgressEntity
import com.ruege.mobile.data.local.entity.ProgressSyncQueueEntity
import com.ruege.mobile.data.local.entity.SyncStatus
import com.ruege.mobile.data.network.api.ProgressApiService
import com.ruege.mobile.data.network.dto.ProgressUpdateRequest
import com.ruege.mobile.data.network.dto.response.ProgressSyncItemDto
import com.ruege.mobile.util.NetworkUtils
import com.ruege.mobile.worker.ProgressSyncWorker
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton
import com.ruege.mobile.data.mapper.toProgressEntity
import android.content.SharedPreferences
import com.ruege.mobile.data.mapper.toProgressUpdateDto
import org.json.JSONArray
import com.ruege.mobile.data.mapper.parseJsonSolvedTaskIds
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import androidx.lifecycle.asFlow

/**
 * –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
 */
@Singleton
class ProgressSyncRepository @Inject constructor(
    @ApplicationContext private val context: Context,
    private val progressDao: ProgressDao,
    private val progressSyncQueueDao: ProgressSyncQueueDao,
    private val progressApiService: ProgressApiService
) {
    private val TAG = "ProgressSyncRepository"
    private val PREFS_NAME = "ProgressSyncPrefs"
    private val KEY_LAST_SYNC_TIMESTAMP = "lastSyncTimestamp"
    private val KEY_COMPLETED_TASKS_COUNTER = "completedTasksCounter"
    private val TASKS_THRESHOLD_FOR_SYNC = 20 // –ü–æ—Ä–æ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

    private val sharedPreferences: SharedPreferences by lazy {
        context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    private fun getLastSyncTimestamp(): Long? {
        val timestamp = sharedPreferences.getLong(KEY_LAST_SYNC_TIMESTAMP, -1L)
        return if (timestamp == -1L) null else timestamp
    }

    private fun saveLastSyncTimestamp(timestamp: Long) {
        sharedPreferences.edit().putLong(KEY_LAST_SYNC_TIMESTAMP, timestamp).apply()
    }
    
    private fun getCompletedTasksCounter(): Int {
        return sharedPreferences.getInt(KEY_COMPLETED_TASKS_COUNTER, 0)
    }
    
    private fun incrementCompletedTasksCounter() {
        val currentCount = getCompletedTasksCounter()
        sharedPreferences.edit().putInt(KEY_COMPLETED_TASKS_COUNTER, currentCount + 1).apply()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if ((currentCount + 1) >= TASKS_THRESHOLD_FOR_SYNC) {
            Log.d(TAG, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –≤ $TASKS_THRESHOLD_FOR_SYNC –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Worker
            syncNow(true)
            
            // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ API
            GlobalScope.launch(Dispatchers.IO) {
                try {
                    Log.d(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Å–ª–µ $TASKS_THRESHOLD_FOR_SYNC –∑–∞–¥–∞–Ω–∏–π")
                    
                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ PENDING –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–Ω–µ –±–æ–ª–µ–µ 100 –∑–∞ —Ä–∞–∑)
                    val pendingItems = progressSyncQueueDao.getItemsByStatusSync(SyncStatus.PENDING.getValue(), 100)
                    
                    if (pendingItems.isNotEmpty()) {
                        Log.d(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ ${pendingItems.size} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        
                        // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        pendingItems.forEach { item ->
                            try {
                                val updateRequest = ProgressUpdateRequest(
                                    contentId = item.contentId,
                                    percentage = item.percentage,
                                    completed = item.isCompleted(),
                                    timestamp = item.timestamp,
                                    solvedTaskIds = parseJsonSolvedTaskIds(item.getSolvedTaskIds())
                                )
                                
                                val response = progressApiService.updateProgress(updateRequest)
                                
                                if (response.isSuccessful) {
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ SYNCED
                                    item.syncStatus = SyncStatus.SYNCED
                                    progressSyncQueueDao.update(item)
                                    Log.d(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ${item.contentId}")
                                } else {
                                    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ FAILED
                                    item.syncStatus = SyncStatus.FAILED
                                    progressSyncQueueDao.update(item)
                                    Log.e(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${item.contentId}, –∫–æ–¥ ${response.code()}")
                                }
                            } catch (e: Exception) {
                                Log.e(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${item.contentId}", e)
                                // –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ FAILED
                                item.syncStatus = SyncStatus.FAILED
                                progressSyncQueueDao.update(item)
                            }
                        }
                        
                        // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
                        forceSyncWithServer()
                    } else {
                        Log.d(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å–µ—Ä–≤–µ—Ä–∞")
                        
                        // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                        forceSyncWithServer()
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", e)
                }
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            resetCompletedTasksCounter()
        } else {
            Log.d(TAG, "–°—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ${currentCount + 1}, –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $TASKS_THRESHOLD_FOR_SYNC")
        }
    }
    
    private fun resetCompletedTasksCounter() {
        sharedPreferences.edit().putInt(KEY_COMPLETED_TASKS_COUNTER, 0).apply()
        Log.d(TAG, "–°—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω –≤ 0")
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @param progress –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     * @param syncImmediately –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     * @return id –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
     */
    suspend fun queueProgressUpdate(progress: ProgressEntity, syncImmediately: Boolean = false): Long = withContext(Dispatchers.IO) {
        val timestamp = System.currentTimeMillis()
        val userId = progress.getUserId()
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ ProgressEntity
        val solvedTaskIds = progress.getSolvedTaskIds()
        
        Log.d(TAG, "üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: contentId=${progress.getContentId()}, percentage=${progress.getPercentage()}, completed=${progress.isCompleted()}, syncImmediately=$syncImmediately")
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        val syncQueueEntity = ProgressSyncQueueEntity(
            progress.getContentId(),
            progress.getPercentage(),
            progress.isCompleted(),
            timestamp,
            userId,
            SyncStatus.PENDING,
            solvedTaskIds
        )
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ contentId
        val existingItem = progressSyncQueueDao.getItemByContentId(progress.getContentId())
        
        if (existingItem != null) {
            // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë id
            syncQueueEntity.setId(existingItem.id)
            Log.d(TAG, "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: contentId=${progress.getContentId()}, id=${existingItem.id}")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å
        val id = progressSyncQueueDao.insert(syncQueueEntity)
        Log.d(TAG, "üîÑ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: contentId=${progress.getContentId()}, id=$id")
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (100%), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if (progress.isCompleted() && progress.contentId.startsWith("task_group_")) {
            incrementCompletedTasksCounter()
            Log.d(TAG, "üîÑ –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è: ${progress.getContentId()}")
        }
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è), 
        // —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        if (syncImmediately && NetworkUtils.isNetworkAvailable(context)) {
            Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${progress.getContentId()}, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            ProgressSyncWorker.startOneTimeSync(context, true)
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ syncNow –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            syncNow(true, false)
            Log.d(TAG, "üîÑ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ syncNow –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ contentId=${progress.getContentId()}")
        } else {
            Log.d(TAG, "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${progress.getContentId()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (syncImmediately=$syncImmediately, —Å–µ—Ç—å: ${NetworkUtils.isNetworkAvailable(context)})")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            val completedCount = getCompletedTasksCounter()
            Log.d(TAG, "üîÑ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: $completedCount")
            
            if (completedCount >= TASKS_THRESHOLD_FOR_SYNC && NetworkUtils.isNetworkAvailable(context)) {
                Log.d(TAG, "üîÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –∑–∞–¥–∞–Ω–∏–π ($completedCount >= $TASKS_THRESHOLD_FOR_SYNC), –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                resetCompletedTasksCounter()
                syncNow(true, false)
            }
        }
        
        return@withContext id
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
     * @param status —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return LiveData —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
     */
    fun getCountByStatus(status: SyncStatus): LiveData<Int> {
        return progressSyncQueueDao.getCountByStatus(status.getValue())
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
     * @param status —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
     */
    fun getItemsByStatus(status: SyncStatus): LiveData<List<ProgressSyncQueueEntity>> {
        return progressSyncQueueDao.getItemsByStatus(status.getValue())
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
     */
    fun getItemsByUserId(userId: Long): LiveData<List<ProgressSyncQueueEntity>> {
        return progressSyncQueueDao.getItemsByUserId(userId)
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param status —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    suspend fun clearByStatus(status: SyncStatus) = withContext(Dispatchers.IO) {
        progressSyncQueueDao.deleteByStatus(status.getValue())
        Log.d(TAG, "Cleared sync queue items with status: ${status.getValue()}")
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    suspend fun clearByUserId(userId: Long) = withContext(Dispatchers.IO) {
        progressSyncQueueDao.deleteByUserId(userId)
        Log.d(TAG, "Cleared sync queue items for user: $userId")
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @param intervalMinutes –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    fun startPeriodicSync(intervalMinutes: Long = 60) {
        ProgressSyncWorker.schedulePeriodicSync(context, intervalMinutes)
        Log.d(TAG, "Started periodic sync with interval $intervalMinutes minutes")
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @param expedited –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     * @param isAppClosing –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun syncNow(expedited: Boolean = true, isAppClosing: Boolean = false) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (!NetworkUtils.isNetworkAvailable(context)) {
            Log.w(TAG, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞: —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è,
        // –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ Worker
        if (isAppClosing || expedited) {
            Log.d(TAG, "–ó–∞–ø—É—Å–∫ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${if (isAppClosing) "–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" else "—Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"}")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            val job = GlobalScope.launch(Dispatchers.IO) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ PENDING –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    val pendingItems = progressSyncQueueDao.getItemsByStatusSync(SyncStatus.PENDING.getValue(), 100)
                    
                    if (pendingItems.isNotEmpty()) {
                        Log.d(TAG, "Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ ${pendingItems.size} –∑–∞–ø–∏—Å–µ–π")
                        
                        // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        processSyncItems(pendingItems)
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        saveLastSyncTimestamp(System.currentTimeMillis())
                    } else {
                        Log.d(TAG, "Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", e)
                }
            }
            
            // –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if (isAppClosing) {
                try {
                    kotlinx.coroutines.runBlocking { 
                        kotlinx.coroutines.withTimeout(5000) {
                            job.join()
                        }
                    }
                } catch (e: Exception) {
                    Log.w(TAG, "Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", e)
                }
            }
        } else {
            // –î–ª—è –Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Worker
            ProgressSyncWorker.startOneTimeSync(context, false)
            Log.d(TAG, "–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Worker")
        }
    }
    
    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    fun stopPeriodicSync() {
        ProgressSyncWorker.cancelSync(context)
        Log.d(TAG, "Stopped periodic sync")
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç LiveData –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏
     */
    fun getAllSyncItems(): LiveData<List<ProgressSyncQueueEntity>> {
        return progressSyncQueueDao.getAllItems()
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     */
    fun initialize() {
        Log.d(TAG, "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProgressSyncRepository –Ω–∞—á–∞—Ç–∞")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
        try {
            GlobalScope.launch(Dispatchers.IO) {
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
                val pendingCount = progressSyncQueueDao.getCountByStatusSync(SyncStatus.PENDING.getValue())
                val failedCount = progressSyncQueueDao.getCountByStatusSync(SyncStatus.FAILED.getValue())
                val totalCount = progressSyncQueueDao.getAllItemsSync().size
                
                Log.d(TAG, "üöÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: pending=$pendingCount, failed=$failedCount, –≤—Å–µ–≥–æ=$totalCount")
                
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                ProgressSyncWorker.schedulePeriodicSync(context)
                Log.d(TAG, "üöÄ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
                if (pendingCount > 0 && NetworkUtils.isNetworkAvailable(context)) {
                    Log.d(TAG, "üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ ($pendingCount), –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                    syncNow(true)
                } else {
                    Log.d(TAG, "üöÄ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "üöÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProgressSyncRepository", e)
        }
        
        Log.d(TAG, "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProgressSyncRepository –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
     * @return true, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    suspend fun forceSyncWithServer(): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "‚ö° –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
            
            if (!NetworkUtils.isNetworkAvailable(context)) {
                Log.w(TAG, "‚ö†Ô∏è –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
                return@withContext false
            }
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
            val pendingItems = progressSyncQueueDao.getItemsByStatusSync(SyncStatus.PENDING.getValue(), 100)
            if (pendingItems.isNotEmpty()) {
                Log.d(TAG, "üîÑ –ù–∞–π–¥–µ–Ω–æ ${pendingItems.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                val syncSuccess = processSyncItems(pendingItems)
                if (!syncSuccess) {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
                }
            } else {
                Log.d(TAG, "‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")
            }
            
            val lastTimestamp = getLastSyncTimestamp()
            Log.d(TAG, "üïí –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å timestamp: $lastTimestamp")
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è lastTimestamp
                val response = progressApiService.syncProgress(lastTimestamp)
                
                if (response.isSuccessful) {
                    val serverProgressDtoList = response.body()
                    
                    if (serverProgressDtoList != null) {
                        if (serverProgressDtoList.isNotEmpty()) {
                            Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${serverProgressDtoList.size} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞")
                            
                            val entitiesToInsert = serverProgressDtoList.mapNotNull { dto ->
                                dto.toProgressEntity()
                            }
                            
                            if (entitiesToInsert.isNotEmpty()) {
                                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                                val existingProgressMap = progressDao.getAllProgressListSync().associateBy { it.getContentId() }

                                val toUpdate = mutableListOf<ProgressEntity>()
                                val toInsert = mutableListOf<ProgressEntity>()
                                val toQueueForSync = mutableListOf<ProgressEntity>()

                                for (serverEntity in entitiesToInsert) {
                                    val localEntity = existingProgressMap[serverEntity.getContentId()]

                                    if (localEntity != null) {
                                        // –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
                                        if (serverEntity.getLastAccessed() > localEntity.getLastAccessed()) {
                                            // –î–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–æ–≤–µ–µ –∏–ª–∏ —Ç–∞–∫–∏–µ –∂–µ
                                            // –û–±—ä–µ–¥–∏–Ω—è–µ–º solvedTaskIds
                                            val localSolvedIds = localEntity.getSolvedTaskIdsList().toMutableSet()
                                            val serverSolvedIds = serverEntity.getSolvedTaskIdsList()
                                            localSolvedIds.addAll(serverSolvedIds)
                                            
                                            val mergedEntity = serverEntity // –ë–µ—Ä–µ–º –∑–∞ –æ—Å–Ω–æ–≤—É —Å–µ—Ä–≤–µ—Ä–Ω—É—é, —Ç.–∫. –æ–Ω–∞ –Ω–æ–≤–µ–µ –≤ —Ü–µ–ª–æ–º
                                            mergedEntity.setSolvedTaskIds(ProgressEntity.listToJsonString(localSolvedIds.toList()))
                                            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ completed –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö solvedTaskIds
                                            val totalTasks = getTotalTasksCount(mergedEntity.getContentId()) // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                                            val newPercentage = calculatePercentage(localSolvedIds.size, totalTasks) // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                                            mergedEntity.setPercentage(newPercentage)
                                            mergedEntity.setCompleted(newPercentage >= 100)                                           
                                            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ lastAccessed –±–µ—Ä–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–∑ –¥–≤—É—Ö
                                            mergedEntity.setLastAccessed(maxOf(serverEntity.getLastAccessed(), localEntity.getLastAccessed()))
                                            toUpdate.add(mergedEntity)
                                            Log.d(TAG, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–ª—è ${serverEntity.getContentId()}, —Å–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω. –°–µ—Ä–≤–µ—Ä: ${serverEntity.getLastAccessed()}, –õ–æ–∫–∞–ª—å–Ω–æ: ${localEntity.getLastAccessed()}. –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ ID: ${localSolvedIds.size}")
                                        } else {
                                            // –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–µ, –∏—Ö –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                                            // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏, –∞ —Å—Ç–∞–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                                            toQueueForSync.add(localEntity)
                                            Log.d(TAG, "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${localEntity.getContentId()} –Ω–æ–≤–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä: ${serverEntity.getLastAccessed()}, –õ–æ–∫–∞–ª—å–Ω–æ: ${localEntity.getLastAccessed()}. –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")
                                        }
                                    } else {
                                        // –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞
                                        toInsert.add(serverEntity)
                                        Log.d(TAG, "‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ${serverEntity.getContentId()}")
                                    }
                                }
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                                if (toUpdate.isNotEmpty()) {
                                    progressDao.updateAll(toUpdate)
                                    Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${toUpdate.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
                                }
                                
                                // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                                if (toInsert.isNotEmpty()) {
                                    progressDao.insertAll(toInsert)
                                    Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${toInsert.size} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                                }

                                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–æ–≤–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö
                                if (toQueueForSync.isNotEmpty()) {
                                    for (entityToSync in toQueueForSync) {
                                        queueProgressUpdate(entityToSync, true) // syncImmediately = true
                                    }
                                    Log.d(TAG, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ${toQueueForSync.size} –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                                }
                                
                                Log.d(TAG, "‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${entitiesToInsert.size} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º: ${toUpdate.size}, –Ω–æ–≤—ã—Ö: ${toInsert.size}, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${toQueueForSync.size})")
                            }
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            val maxTimestamp = serverProgressDtoList.mapNotNull { it.timestamp }.maxOrNull() ?: System.currentTimeMillis()
                            saveLastSyncTimestamp(maxTimestamp)
                            Log.d(TAG, "üïí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $maxTimestamp")
                        } else {
                            Log.d(TAG, "‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                            
                            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                            if (lastTimestamp == null) {
                                val currentTime = System.currentTimeMillis()
                                saveLastSyncTimestamp(currentTime)
                                Log.d(TAG, "üïí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: $currentTime")
                            }
                        }
                        return@withContext true
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª null –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                    }
                } else {
                    Log.e(TAG, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${response.code()} ${response.message()}")
                    if (response.errorBody() != null) {
                        try {
                            Log.e(TAG, "üö´ –¢–µ–ª–æ –æ—à–∏–±–∫–∏: ${response.errorBody()?.string()}")
                        } catch (e: Exception) {
                            Log.e(TAG, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏", e)
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", e)
                e.printStackTrace()
            }
            
            return@withContext false
        } catch (e: Exception) {
            Log.e(TAG, "üö´ –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ forceSyncWithServer", e)
            e.printStackTrace()
            return@withContext false
        }
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
     * @param contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return true, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    suspend fun syncContentImmediately(contentId: String): Boolean = withContext(Dispatchers.IO) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Ç—å
            if (!NetworkUtils.isNetworkAvailable(context)) {
                Log.w(TAG, "Network not available, can't sync content $contentId")
                return@withContext false
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            val progressEntity = progressDao.getProgressByContentId(contentId).value
            
            if (progressEntity != null) {
                // –°–æ–∑–¥–∞–µ–º DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                val updateRequest = ProgressUpdateRequest(
                    contentId = progressEntity.getContentId(),
                    percentage = progressEntity.getPercentage(),
                    completed = progressEntity.isCompleted(),
                    timestamp = progressEntity.getLastAccessed(),
                    solvedTaskIds = parseJsonSolvedTaskIds(progressEntity.getSolvedTaskIds())
                )
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                val response = progressApiService.updateProgress(updateRequest)
                
                if (response.isSuccessful) {
                    val syncResponse = response.body()
                    
                    if (syncResponse != null && syncResponse.success) {
                        Log.d(TAG, "Successfully synced content $contentId with server")
                        return@withContext true
                    } else {
                        Log.w(TAG, "Server rejected sync for content $contentId: ${syncResponse?.message}")
                    }
                } else {
                    Log.e(TAG, "Failed to sync content $contentId: ${response.code()} ${response.message()}")
                }
            } else {
                Log.w(TAG, "No local progress found for content $contentId")
            }
            
            return@withContext false
        } catch (e: Exception) {
            Log.e(TAG, "Error during immediate sync for content $contentId", e)
            return@withContext false
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
     * @return –°–ø–∏—Å–æ–∫ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    suspend fun getAvailableContentIds(): List<String> = withContext(Dispatchers.IO) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ ContentDao
            val db = AppDatabase.getInstance(context)
            val contentIds = db.contentDao().getAllContentIds()
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ ID –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
            if (contentIds.isEmpty()) {
                Log.w(TAG, "–í —Ç–∞–±–ª–∏—Ü–µ contents –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π")
                return@withContext getLocalTaskTypeContentIds()
            }
            
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentIds.size}")
            return@withContext contentIds
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞", e)
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return@withContext emptyList()
        }
    }

    private suspend fun getLocalTaskTypeContentIds(): List<String> {
        return withContext(Dispatchers.IO) {
            // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ ContentDao, –µ—Å–ª–∏ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–∞–º
            (1..27).map { "task_group_$it" } // –ò–∑–º–µ–Ω–µ–Ω–æ task_type_ –Ω–∞ task_group_
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–º
     * @param items —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return true, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    private suspend fun processSyncItems(items: List<ProgressSyncQueueEntity>): Boolean = withContext(Dispatchers.IO) {
        if (items.isEmpty()) {
            Log.d(TAG, "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return@withContext true
        }
        
        Log.d(TAG, "üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${items.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        try {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ contentId –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            val groupedItems = items.groupBy { it.contentId }
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ contentId –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —ç–ª–µ–º–µ–Ω—Ç
            val latestItems = groupedItems.mapValues { (_, items) -> 
                items.maxByOrNull { it.timestamp } 
            }.values.filterNotNull()
            
            Log.d(TAG, "üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ ${latestItems.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–±—ã–ª–æ ${items.size})")
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ progressEntity –∏–∑ –±–∞–∑—ã –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            val contentIds = latestItems.map { it.contentId }
            Log.d(TAG, "üìä ContentIds –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $contentIds")
            val progressEntities = progressDao.getProgressByContentIdsSync(contentIds)
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É contentId -> progressEntity –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            val progressEntityMap = progressEntities.associateBy { it.getContentId() }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            val updateRequests = latestItems.map { item ->
                // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≤ –∫–∞—Ä—Ç–µ
                val progressEntity = progressEntityMap[item.contentId]
                
                // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏
                if (progressEntity != null) {
                    Log.d(TAG, "üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ progressEntity –¥–ª—è ${item.contentId}, percentage=${progressEntity.getPercentage()}, completed=${progressEntity.isCompleted()}")
                    toProgressUpdateDto(progressEntity)
                } else {
                    Log.d(TAG, "üìä –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è ${item.contentId}, percentage=${item.percentage}, completed=${item.isCompleted()}")
                    ProgressUpdateRequest(
                        contentId = item.contentId,
                        percentage = item.percentage,
                        completed = item.isCompleted(),
                        timestamp = item.timestamp,
                        solvedTaskIds = parseJsonSolvedTaskIds(item.getSolvedTaskIds())
                    )
                }
            }
            
            if (updateRequests.isEmpty()) {
                Log.d(TAG, "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return@withContext true
            }
            
            Log.d(TAG, "üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è ${updateRequests.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            updateRequests.forEach { request ->
                Log.d(TAG, "üìä –ó–∞–ø—Ä–æ—Å: contentId=${request.contentId}, percentage=${request.percentage}, completed=${request.completed}")
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if (!NetworkUtils.isNetworkAvailable(context)) {
                Log.w(TAG, "‚ùå –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞.")
                return@withContext false
            }
            
            Log.d(TAG, "üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: ${progressApiService.javaClass.name}")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            val response = progressApiService.updateProgressBatch(updateRequests)
            
            Log.d(TAG, "üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: isSuccessful=${response.isSuccessful}, code=${response.code()}")
            
            if (response.isSuccessful) {
                val responseList = response.body()
                
                if (responseList != null) {
                    Log.d(TAG, "üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: size=${responseList.size}")
                    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É contentId -> –æ—Ç–≤–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    val responseMap = responseList.associateBy { it.contentId }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    for (item in items) {
                        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ content_id
                        val itemResponse = responseMap[item.contentId]
                        
                        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –æ–Ω —É—Å–ø–µ—à–Ω—ã–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ SYNCED
                        if (itemResponse != null && itemResponse.success) {
                            item.syncStatus = SyncStatus.SYNCED
                        } else {
                            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ FAILED
                            item.syncStatus = SyncStatus.FAILED
                        }
                        
                        progressSyncQueueDao.update(item)
                    }
                    
                    val allSuccess = responseList.all { it.success }
                    Log.d(TAG, "Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${items.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—Å–µ —É—Å–ø–µ—à–Ω–æ: $allSuccess")
                    return@withContext true
                } else {
                    Log.e(TAG, "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                }
            } else {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${response.code()} ${response.message()}")
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–º–µ—Ç–∏–º –≤—Å–µ –∫–∞–∫ FAILED
                if (response.code() == 401 || response.code() == 403) {
                    for (item in items) {
                        item.syncStatus = SyncStatus.FAILED
                        progressSyncQueueDao.update(item)
                    }
                }
            }
            
            return@withContext false
        } catch (e: Exception) {
            Log.e(TAG, "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", e)
            return@withContext false
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param taskGroupId ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, task_group_1)
     * @param solvedTaskId ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     * @param syncImmediately –Ω—É–∂–Ω–æ –ª–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
     */
    suspend fun addSolvedTask(taskGroupId: String, solvedTaskId: String, syncImmediately: Boolean = false) = withContext(Dispatchers.IO) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            var progressEntity = progressDao.getProgressByContentIdSync(taskGroupId)

            // –ï—Å–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å ProgressEntity –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if (progressEntity == null) {
                Log.d(TAG, "–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≥—Ä—É–ø–ø—ã $taskGroupId –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                // –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è ProgressEntity,
                // –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç taskGroupId –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ProgressEntity –∏–º–µ–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å contentId.
                // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–µ userId –≤ ProgressEntity, –µ–≥–æ —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
                // –ü—Ä–∏–º–µ—Ä: progressEntity = ProgressEntity(contentId = taskGroupId, userId = getCurrentUserId())
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ ProgressEntity –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —Å taskGroupId
                // –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∏–∂–µ –∏–ª–∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                // –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —á–∞—Å—Ç—å –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É ProgressEntity.
                // –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ userId, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
                // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ userId –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —è–≤–Ω–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω –ª–∏–±–æ –Ω–µ –Ω—É–∂–µ–Ω
                // –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –ª–∏–±–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –ª–∏–±–æ ProgressEntity() –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç.
                progressEntity = ProgressEntity() // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                progressEntity.setContentId(taskGroupId)
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                progressEntity.setPercentage(0)
                progressEntity.setCompleted(false)
                progressEntity.setLastAccessed(System.currentTimeMillis())
                progressEntity.setSolvedTaskIds("[]") // –ü—É—Å—Ç–æ–π JSON –º–∞—Å—Å–∏–≤ –¥–ª—è solvedTaskIds

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å –≤ –ë–î –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                // –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                progressDao.insert(progressEntity)
                Log.d(TAG, "–ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å ProgressEntity –¥–ª—è $taskGroupId —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ –ë–î, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
                // (–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ insert –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∏–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ –ø–æ–ª—è)
                progressEntity = progressDao.getProgressByContentIdSync(taskGroupId)
                if (progressEntity == null) {
                    Log.e(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å ProgressEntity –¥–ª—è $taskGroupId –ø–æ—Å–ª–µ insert.")
                    return@withContext false // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            val currentSolved = progressEntity.getSolvedTaskIdsList().toMutableList()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
            if (!currentSolved.contains(solvedTaskId)) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                currentSolved.add(solvedTaskId)
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                val totalTasksCount = getTotalTasksCount(taskGroupId)
                Log.d(TAG, "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã $taskGroupId: $totalTasksCount")
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                val newPercentage = calculatePercentage(currentSolved.size, totalTasksCount)
                val newLastAccessed = System.currentTimeMillis()
                val newSolvedTaskIds = ProgressEntity.listToJsonString(currentSolved)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É—â–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
                progressEntity.setPercentage(newPercentage)
                progressEntity.setLastAccessed(newLastAccessed)
                progressEntity.setCompleted(newPercentage >= 100)
                progressEntity.setSolvedTaskIds(newSolvedTaskIds)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î (–æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å—É—â–Ω–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞)
                progressDao.update(progressEntity)
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                queueProgressUpdate(progressEntity, syncImmediately)
                
                Log.d(TAG, "–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ $solvedTaskId –≤ –≥—Ä—É–ø–ø—É $taskGroupId. –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: $newPercentage%")
                return@withContext true
            } else {
                Log.d(TAG, "–ó–∞–¥–∞–Ω–∏–µ $solvedTaskId —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ –≤ –≥—Ä—É–ø–ø–µ $taskGroupId")
                return@withContext false
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è", e)
            return@withContext false
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π
     * @param taskGroupId ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
     */
    private fun getTotalTasksCount(taskGroupId: String): Int {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            val contentEntity = AppDatabase.getInstance(context).contentDao().getContentByIdSync(taskGroupId)
            
            if (contentEntity != null && contentEntity.description != null) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                val description = contentEntity.description
                Log.d(TAG, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è $taskGroupId: $description")
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–∑–∞–¥–∞–Ω–∏–π" –∏–ª–∏ "–∑–∞–¥–∞–Ω–∏–µ" –∏–ª–∏ "–∑–∞–¥–∞–Ω–∏—è"
                val pattern = java.util.regex.Pattern.compile("(\\d+)\\s+(–∑–∞–¥–∞–Ω–∏–π|–∑–∞–¥–∞–Ω–∏–µ|–∑–∞–¥–∞–Ω–∏—è)")
                val matcher = pattern.matcher(description)
                
                if (matcher.find()) {
                    val countStr = matcher.group(1)
                    val count = countStr.toInt()
                    Log.d(TAG, "–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è $taskGroupId: $count")
                    return count
                }
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                val numberPattern = java.util.regex.Pattern.compile("(\\d+)")
                val numberMatcher = numberPattern.matcher(description)
                
                if (numberMatcher.find()) {
                    val countStr = numberMatcher.group(1)
                    val count = countStr.toInt()
                    Log.d(TAG, "–ò–∑–≤–ª–µ—á–µ–Ω–æ —á–∏—Å–ª–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è $taskGroupId: $count")
                    return count
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ,
            // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            Log.d(TAG, "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è $taskGroupId")
            val groupNumber = taskGroupId.replace("task_group_", "").toIntOrNull() ?: 0
            
            return when (groupNumber) {
                1 -> 10  // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤ –∑–∞–¥–∞–Ω–∏–∏ 1 - 10 –ø–æ–¥–∑–∞–¥–∞–Ω–∏–π
                2 -> 8   // –í –∑–∞–¥–∞–Ω–∏–∏ 2 - 8 –ø–æ–¥–∑–∞–¥–∞–Ω–∏–π
                3 -> 15  // –∏ —Ç.–¥.
                4 -> 12
                5 -> 99  // –í –∑–∞–¥–∞–Ω–∏–∏ 5 - 99 –ø–æ–¥–∑–∞–¥–∞–Ω–∏–π
                6 -> 8
                7 -> 10
                8 -> 12
                9 -> 15
                10 -> 10
                11 -> 8
                12 -> 10
                13 -> 12
                14 -> 8
                15 -> 10
                16 -> 12
                17 -> 10
                18 -> 12
                19 -> 10
                20 -> 8
                21 -> 10
                22 -> 8
                23 -> 15
                24 -> 10
                25 -> 10
                26 -> 12
                27 -> 1   // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Å–æ—á–∏–Ω–µ–Ω–∏–µ) –æ–±—ã—á–Ω–æ –æ–¥–Ω–æ
                else -> 10 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 10 –∑–∞–¥–∞–Ω–∏–π
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è $taskGroupId", e)
            return 10 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     * @param solvedCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     * @param totalCount –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 0 –¥–æ 100)
     */
    private fun calculatePercentage(solvedCount: Int, totalCount: Int): Int {
        if (totalCount <= 0) return 0
        return ((solvedCount.toFloat() / totalCount) * 100).toInt().coerceIn(0, 100)
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ DTO –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    private fun toProgressUpdateDto(progressEntity: ProgressEntity): ProgressUpdateRequest {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É —Å —Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –≤ —Å–ø–∏—Å–æ–∫
        val solvedTaskIds = progressEntity.getSolvedTaskIdsList().takeIf { it.isNotEmpty() }
        
        return ProgressUpdateRequest(
            contentId = progressEntity.getContentId(),
            percentage = progressEntity.getPercentage(),
            completed = progressEntity.isCompleted(),
            timestamp = progressEntity.getLastAccessed(),
            solvedTaskIds = solvedTaskIds
        )
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫ ID —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï–ì–≠.
     * @param categoryId ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "2", ... "27")
     * @return Flow, –∫–æ—Ç–æ—Ä—ã–π —ç–º–∏—Ç–∏—Ç —Å–ø–∏—Å–æ–∫ ID —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (List<String>)
     */
    fun getSolvedTaskIdsForEgeCategory(categoryId: String): kotlinx.coroutines.flow.Flow<List<String>> {
        val contentId = "task_group_$categoryId"

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º asFlow() –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è LiveData<ProgressEntity> –≤ Flow<ProgressEntity?>
        return progressDao.getProgressByContentId(contentId).asFlow()
            .map { entity: ProgressEntity? -> // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø entity –∫–∞–∫ ProgressEntity?
                if (entity != null && !entity.getSolvedTaskIds().isNullOrEmpty()) {
                    try {
                        // parseJsonSolvedTaskIds –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å null, –ø–æ—ç—Ç–æ–º—É –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç emptyList() –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
                        parseJsonSolvedTaskIds(entity.getSolvedTaskIds()) ?: emptyList<String>()
                    } catch (e: org.json.JSONException) {
                        Log.e(TAG, "–û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞ solvedTaskIds –¥–ª—è contentId $contentId: ${entity.getSolvedTaskIds()}", e)
                        emptyList<String>()
                    } catch (e: Exception) {
                        Log.e(TAG, "–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ solvedTaskIds –¥–ª—è contentId $contentId: ${entity.getSolvedTaskIds()}", e)
                        emptyList<String>()
                    }
                } else {
                    emptyList<String>()
                }
            }
    }
} 