package com.ruege.mobile.data.repository

import android.content.Context
import timber.log.Timber
import androidx.lifecycle.LiveData
import com.ruege.mobile.data.local.dao.ContentDao
import com.ruege.mobile.data.local.dao.ProgressDao
import com.ruege.mobile.data.local.dao.ProgressSyncQueueDao
import com.ruege.mobile.data.local.entity.ProgressEntity
import com.ruege.mobile.data.local.entity.ProgressSyncQueueEntity
import com.ruege.mobile.data.local.entity.SyncStatus
import com.ruege.mobile.data.network.api.ProgressApiService
import com.ruege.mobile.data.network.dto.ProgressUpdateRequest
import com.ruege.mobile.utils.NetworkUtils
import com.ruege.mobile.worker.ProgressSyncWorker
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton
import com.ruege.mobile.data.mapper.toProgressEntity
import android.content.SharedPreferences
import com.ruege.mobile.data.mapper.parseJsonSolvedTaskIds
import kotlinx.coroutines.flow.map
import androidx.lifecycle.asFlow
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob
import com.ruege.mobile.data.local.dao.UserDao
import com.ruege.mobile.data.local.entity.PracticeStatisticsEntity
import com.ruege.mobile.data.local.dao.PracticeStatisticsDao
import com.ruege.mobile.data.network.api.PracticeApiService
import com.ruege.mobile.data.network.dto.request.PracticeStatisticSyncDto
import com.ruege.mobile.data.network.dto.request.PracticeStatisticsBranchRequest
import com.ruege.mobile.data.local.dao.TaskDao

/**
 * –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
 */
@Singleton
class ProgressSyncRepository @Inject constructor(
    @ApplicationContext private val context: Context,
    private val progressDao: ProgressDao,
    private val progressSyncQueueDao: ProgressSyncQueueDao,
    private val progressApiService: ProgressApiService,
    private val practiceApiService: PracticeApiService,
    private val contentDao: ContentDao,
    private val userDao: UserDao,
    private val practiceStatisticsDao: PracticeStatisticsDao,
    private val practiceSyncRepository: PracticeSyncRepository,
    private val taskDao: TaskDao
) {
    private val TAG = "ProgressSyncRepository"
    private val PREFS_NAME = "ProgressSyncPrefs"
    private val KEY_LAST_SYNC_TIMESTAMP = "lastSyncTimestamp"
    private val KEY_LAST_STATS_SYNC_TIMESTAMP = "lastStatsSyncTimestamp"
    private val KEY_COMPLETED_TASKS_COUNTER = "completedTasksCounter"
    private val TASKS_THRESHOLD_FOR_SYNC = 20

    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    private val sharedPreferences: SharedPreferences by lazy {
        context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    private fun getLastSyncTimestamp(): Long? {
        val timestamp = sharedPreferences.getLong(KEY_LAST_SYNC_TIMESTAMP, -1L)
        return if (timestamp == -1L) null else timestamp
    }

    private fun saveLastSyncTimestamp(timestamp: Long) {
        sharedPreferences.edit().putLong(KEY_LAST_SYNC_TIMESTAMP, timestamp).apply()
    }

    private fun getLastStatsSyncTimestamp(): Long? {
        val timestamp = sharedPreferences.getLong(KEY_LAST_STATS_SYNC_TIMESTAMP, -1L)
        return if (timestamp == -1L) null else timestamp
    }

    private fun saveLastStatsSyncTimestamp(timestamp: Long) {
        sharedPreferences.edit().putLong(KEY_LAST_STATS_SYNC_TIMESTAMP, timestamp).apply()
    }
    
    private fun getCompletedTasksCounter(): Int {
        return sharedPreferences.getInt(KEY_COMPLETED_TASKS_COUNTER, 0)
    }
    
    private fun incrementCompletedTasksCounter() {
        val currentCount = getCompletedTasksCounter()
        sharedPreferences.edit().putInt(KEY_COMPLETED_TASKS_COUNTER, currentCount + 1).apply()
        
        if ((currentCount + 1) >= TASKS_THRESHOLD_FOR_SYNC) {
            Timber.d("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –≤ $TASKS_THRESHOLD_FOR_SYNC –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            syncNow(true)
            
            repositoryScope.launch {
                try {
                    Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Å–ª–µ $TASKS_THRESHOLD_FOR_SYNC –∑–∞–¥–∞–Ω–∏–π")
                    
                    val pendingItems = progressSyncQueueDao.getItemsByStatusSync(SyncStatus.PENDING.getValue(), 100)
                    
                    if (pendingItems.isNotEmpty()) {
                        Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ ${pendingItems.size} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        
                        pendingItems.forEach { item ->
                            try {
                                val updateRequest = ProgressUpdateRequest(
                                    contentId = item.itemId,
                                    percentage = item.percentage,
                                    completed = item.isCompleted(),
                                    timestamp = item.timestamp,
                                    solvedTaskIds = parseJsonSolvedTaskIds(item.getSolvedTaskIds())
                                )
                                
                                val response = progressApiService.updateProgress(updateRequest)
                                
                                if (response.isSuccessful) {
                                    item.syncStatus = SyncStatus.SYNCED
                                    progressSyncQueueDao.update(item)
                                    Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ${item.itemId}")
                                } else {
                                    item.syncStatus = SyncStatus.FAILED
                                    progressSyncQueueDao.update(item)
                                    Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${item.itemId}, –∫–æ–¥ ${response.code()}")
                                }
                            } catch (e: Exception) {
                                Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${item.itemId}", e)
                                item.syncStatus = SyncStatus.FAILED
                                progressSyncQueueDao.update(item)
                            }
                        }
                        
                        forceSyncWithServer()
                    } else {
                        Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å–µ—Ä–≤–µ—Ä–∞")
                        
                        forceSyncWithServer()
                    }
                } catch (e: Exception) {
                    Timber.d("–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", e)
                }
            }
            
            resetCompletedTasksCounter()
        } else {
            Timber.d("–°—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ${currentCount + 1}, –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $TASKS_THRESHOLD_FOR_SYNC")
        }
    }
    
    private fun resetCompletedTasksCounter() {
        sharedPreferences.edit().putInt(KEY_COMPLETED_TASKS_COUNTER, 0).apply()
        Timber.d("–°—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω –≤ 0")
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @param progress –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     * @param syncImmediately –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     * @return id –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
     */
    suspend fun queueProgressUpdate(progress: ProgressEntity, syncImmediately: Boolean = false): Long = withContext(Dispatchers.IO) {
        val timestamp = System.currentTimeMillis()
        val userId = progress.getUserId()
        
        val solvedTaskIds = progress.getSolvedTaskIds()
        
        Timber.d("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: itemId=${progress.getContentId()}, percentage=${progress.getPercentage()}, completed=${progress.isCompleted()}, syncImmediately=$syncImmediately")
        
        val syncQueueEntity = ProgressSyncQueueEntity(
            progress.getContentId(),
            ProgressSyncQueueEntity.ITEM_TYPE_PROGRESS,
            progress.getPercentage(),
            progress.isCompleted(),
            timestamp,
            userId,
            SyncStatus.PENDING,
            solvedTaskIds
        )
        
        val existingItem = progressSyncQueueDao.getItemByItemId(progress.getContentId())
        
        if (existingItem != null) {
            syncQueueEntity.setId(existingItem.id)
            Timber.d("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: itemId=${progress.getContentId()}, id=${existingItem.id}")
        }
        
        val id = progressSyncQueueDao.insert(syncQueueEntity)
        Timber.d("üîÑ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: itemId=${progress.getContentId()}, id=$id")
        
        if (progress.isCompleted() && progress.contentId.startsWith("task_group_")) {
            incrementCompletedTasksCounter()
            Timber.d("üîÑ –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è: ${progress.getContentId()}")
        }
        
        if (syncImmediately && NetworkUtils.isNetworkAvailable(context)) {
            Timber.d("üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${progress.getContentId()}, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            ProgressSyncWorker.startOneTimeSync(context, true)
            syncNow(true, false)
            Timber.d("üîÑ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ syncNow –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ contentId=${progress.getContentId()}")
        } else {
            Timber.d("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${progress.getContentId()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (syncImmediately=$syncImmediately, —Å–µ—Ç—å: ${NetworkUtils.isNetworkAvailable(context)})")
            
            val completedCount = getCompletedTasksCounter()
            Timber.d("üîÑ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: $completedCount")
            
            if (completedCount >= TASKS_THRESHOLD_FOR_SYNC && NetworkUtils.isNetworkAvailable(context)) {
                Timber.d("üîÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –∑–∞–¥–∞–Ω–∏–π ($completedCount >= $TASKS_THRESHOLD_FOR_SYNC), –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                resetCompletedTasksCounter()
                syncNow(true, false)
            }
        }
        
        return@withContext id
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
     * @param status —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return LiveData —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
     */
    fun getCountByStatus(status: SyncStatus): LiveData<Int> {
        return progressSyncQueueDao.getCountByStatus(status.getValue())
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param status —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    suspend fun clearByStatus(status: SyncStatus) = withContext(Dispatchers.IO) {
        progressSyncQueueDao.deleteByStatus(status.getValue())
        Timber.d("Cleared sync queue items with status: ${status.getValue()}")
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    suspend fun clearByUserId(userId: Long) = withContext(Dispatchers.IO) {
        progressSyncQueueDao.deleteByUserId(userId)
        Timber.d("Cleared sync queue items for user: $userId")
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @param expedited –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     * @param isAppClosing –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun syncNow(expedited: Boolean = false, isAppClosing: Boolean = false) {
        Timber.d("syncNow called with expedited: $expedited, isAppClosing: $isAppClosing")
        if (isAppClosing) {
            ProgressSyncWorker.startOneTimeSync(context, expedited = false, isExitSync = true)
            Timber.d("Exit sync has been scheduled using WorkManager.")
        } else {
            ProgressSyncWorker.startOneTimeSync(context, expedited = expedited, isExitSync = false)
            Timber.d("One-time sync has been scheduled using WorkManager.")
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç LiveData –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏
     */
    fun getAllSyncItems(): LiveData<List<ProgressSyncQueueEntity>> {
        return progressSyncQueueDao.getAllItems()
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     */
    fun initialize() {
        Timber.d("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProgressSyncRepository –Ω–∞—á–∞—Ç–∞")
        
        try {
            repositoryScope.launch {
                val pendingCount = progressSyncQueueDao.getCountByStatusSync(SyncStatus.PENDING.getValue())
                val failedCount = progressSyncQueueDao.getCountByStatusSync(SyncStatus.FAILED.getValue())
                val totalCount = progressSyncQueueDao.getAllItemsSync().size
                
                Timber.d("üöÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: pending=$pendingCount, failed=$failedCount, –≤—Å–µ–≥–æ=$totalCount")
                
                ProgressSyncWorker.schedulePeriodicSync(context)
                Timber.d("üöÄ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
                
                if (pendingCount > 0 && NetworkUtils.isNetworkAvailable(context)) {
                    Timber.d("üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ ($pendingCount), –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                    syncNow(true)
                } else {
                    Timber.d("üöÄ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏")
                }
            }
        } catch (e: Exception) {
            Timber.d("üöÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProgressSyncRepository", e)
        }
        
        Timber.d("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProgressSyncRepository –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
     * @return true, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    suspend fun forceSyncWithServer(): Boolean = withContext(Dispatchers.IO) {
        try {
            Timber.d("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
            
            if (!NetworkUtils.isNetworkAvailable(context)) {
                Timber.d("‚ö†Ô∏è –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
                return@withContext false
            }
            
            val statusesToSync = listOf(SyncStatus.PENDING.getValue(), SyncStatus.FAILED.getValue())
            val pendingItems = progressSyncQueueDao.getItemsByStatusesSync(statusesToSync, 100)
            if (pendingItems.isNotEmpty()) {
                Timber.d("üîÑ –ù–∞–π–¥–µ–Ω–æ ${pendingItems.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ (PENDING –∏–ª–∏ FAILED), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                val syncSuccess = processSyncItems(pendingItems)
                if (!syncSuccess) {
                    Timber.d("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
                }
            } else {
                Timber.d("‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")
            }
            
            val lastTimestamp = getLastSyncTimestamp()
            Timber.d("üïí –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å timestamp: $lastTimestamp")
            
            try {
                val response = progressApiService.syncProgress(lastTimestamp)
                
                if (response.isSuccessful) {
                    val serverProgressDtoList = response.body()
                    
                    if (serverProgressDtoList != null) {
                        if (serverProgressDtoList.isNotEmpty()) {
                            Timber.d("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${serverProgressDtoList.size} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞")
                            
                            val entitiesToInsert = serverProgressDtoList.mapNotNull { dto ->
                                dto.toProgressEntity()
                            }
                            
                            if (entitiesToInsert.isNotEmpty()) {
                                val existingProgressMap = progressDao.getAllProgressListSync().associateBy { it.getContentId() }

                                val toUpdate = mutableListOf<ProgressEntity>()
                                val toInsert = mutableListOf<ProgressEntity>()
                                val toQueueForSync = mutableListOf<ProgressEntity>()

                                for (serverEntity in entitiesToInsert) {
                                    val localEntity = existingProgressMap[serverEntity.getContentId()]

                                    if (localEntity != null) {
                                        if (serverEntity.getLastAccessed() > localEntity.getLastAccessed()) {
                                            val localSolvedIds = localEntity.getSolvedTaskIdsList().toMutableSet()
                                            val serverSolvedIds = serverEntity.getSolvedTaskIdsList()
                                            localSolvedIds.addAll(serverSolvedIds)
                                            
                                            val mergedEntity = serverEntity
                                            mergedEntity.setSolvedTaskIds(ProgressEntity.listToJsonString(localSolvedIds.toList()))
                                            val totalTasks = getTotalTasksCount(mergedEntity.getContentId())
                                            val newPercentage = calculatePercentage(localSolvedIds.size, totalTasks)
                                            mergedEntity.setPercentage(newPercentage)
                                            mergedEntity.setCompleted(newPercentage >= 100)                                           
                                            mergedEntity.setLastAccessed(maxOf(serverEntity.getLastAccessed(), localEntity.getLastAccessed()))
                                            toUpdate.add(mergedEntity)
                                            Timber.d("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–ª—è ${serverEntity.getContentId()}, —Å–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ. –°–µ—Ä–≤–µ—Ä: ${serverEntity.getLastAccessed()}, –õ–æ–∫–∞–ª—å–Ω–æ: ${localEntity.getLastAccessed()}. –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ ID: ${localSolvedIds.size}")
                                        } else if (localEntity.getLastAccessed() > serverEntity.getLastAccessed()) {
                                            toQueueForSync.add(localEntity)
                                            Timber.d("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${localEntity.getContentId()} –Ω–æ–≤–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä: ${serverEntity.getLastAccessed()}, –õ–æ–∫–∞–ª—å–Ω–æ: ${localEntity.getLastAccessed()}. –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")
                                        }
                                    } else {
                                        toInsert.add(serverEntity)
                                        Timber.d("‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ${serverEntity.getContentId()}")
                                    }
                                }
                                
                                if (toUpdate.isNotEmpty()) {
                                    progressDao.updateAll(toUpdate)
                                    Timber.d("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${toUpdate.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
                                }
                                
                                if (toInsert.isNotEmpty()) {
                                    progressDao.insertAll(toInsert)
                                    Timber.d("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${toInsert.size} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                                }

                                if (toQueueForSync.isNotEmpty()) {
                                    for (entityToSync in toQueueForSync) {
                                        queueProgressUpdate(entityToSync, true)
                                    }
                                    Timber.d("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ${toQueueForSync.size} –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                                }
                                
                                Timber.d("‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${entitiesToInsert.size} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º: ${toUpdate.size}, –Ω–æ–≤—ã—Ö: ${toInsert.size}, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${toQueueForSync.size})")
                            }
                            
                            val maxTimestamp = serverProgressDtoList.mapNotNull { it.timestamp }.maxOrNull() ?: System.currentTimeMillis()
                            saveLastSyncTimestamp(maxTimestamp)
                            Timber.d("üïí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $maxTimestamp")
                        } else {
                            Timber.d("‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                            
                            if (lastTimestamp == null) {
                                val currentTime = System.currentTimeMillis()
                                saveLastSyncTimestamp(currentTime)
                                Timber.d("üïí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: $currentTime")
                            }
                        }
                        return@withContext true
                    } else {
                        Timber.d("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª null –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                    }
                } else {
                    Timber.d("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${response.code()} ${response.message()}")
                    if (response.errorBody() != null) {
                        try {
                            Timber.d("üö´ –¢–µ–ª–æ –æ—à–∏–±–∫–∏: ${response.errorBody()?.string()}")
                        } catch (e: Exception) {
                            Timber.d("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏", e)
                        }
                    }
                }
            } catch (e: Exception) {
                Timber.d("üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", e)
                e.printStackTrace()
            }
            
            return@withContext false
        } catch (e: Exception) {
            Timber.d("üö´ –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ forceSyncWithServer", e)
            e.printStackTrace()
            return@withContext false
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–º
     * @param items —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @return true, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    private suspend fun processSyncItems(items: List<ProgressSyncQueueEntity>): Boolean {
        if (items.isEmpty()) {
            Timber.d("–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return true
        }

        Timber.d("üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${items.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        val progressItems = items.filter { it.itemType == ProgressSyncQueueEntity.ITEM_TYPE_PROGRESS }
        val statisticsItems = items.filter { it.itemType == ProgressSyncQueueEntity.ITEM_TYPE_STATISTICS }

        var progressSyncSuccess = true
        if (progressItems.isNotEmpty()) {
            progressSyncSuccess = processProgressItems(progressItems)
        }

        var statisticsSyncSuccess = true
        if (statisticsItems.isNotEmpty()) {
            statisticsSyncSuccess = processStatisticsItems(statisticsItems)
        }

        return progressSyncSuccess && statisticsSyncSuccess
    }

    private suspend fun processProgressItems(items: List<ProgressSyncQueueEntity>): Boolean {
        Timber.d("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ ${items.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        try {
            val groupedItems = items.groupBy { it.itemId }
            val latestItems = groupedItems.mapValues { (_, items) -> items.maxByOrNull { it.timestamp } }.values.filterNotNull()
            
            Timber.d("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ ${latestItems.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±—ã–ª–æ ${items.size})")
            
            val contentIds = latestItems.map { it.itemId }
            val progressEntities = progressDao.getProgressByContentIdsSync(contentIds)
            val progressEntityMap = progressEntities.associateBy { it.getContentId() }
            
            val updateRequests = latestItems.map { item ->
                val progressEntity = progressEntityMap[item.itemId]
                if (progressEntity != null) {
                    toProgressUpdateDto(progressEntity)
                } else {
                    ProgressUpdateRequest(
                        contentId = item.itemId,
                        percentage = item.percentage,
                        completed = item.isCompleted(),
                        timestamp = item.timestamp,
                        solvedTaskIds = parseJsonSolvedTaskIds(item.getSolvedTaskIds())
                    )
                }
            }
            
            if (updateRequests.isEmpty()) {
                Timber.d("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return true
            }
            
            Timber.d("üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch-–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è ${updateRequests.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            val response = progressApiService.updateProgressBatch(updateRequests)
            
            Timber.d("üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: isSuccessful=${response.isSuccessful}, code=${response.code()}")
            
            if (response.isSuccessful) {
                val responseList = response.body() ?: emptyList()
                val responseMap = responseList.associateBy { it.contentId }
                
                for (item in items) {
                    val itemResponse = responseMap[item.itemId]
                    if (itemResponse?.success == true) {
                        item.syncStatus = SyncStatus.SYNCED
                    } else {
                        item.syncStatus = SyncStatus.FAILED
                    }
                    progressSyncQueueDao.update(item)
                }
                
                val allSuccess = responseList.all { it.success }
                Timber.d("Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—Å–µ —É—Å–ø–µ—à–Ω–æ: $allSuccess")
                return allSuccess
            } else {
                Timber.d("–û—à–∏–±–∫–∞ –ø—Ä–∏ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${response.code()} ${response.message()}")
                items.forEach { item ->
                    item.syncStatus = SyncStatus.FAILED
                    progressSyncQueueDao.update(item)
                }
                return false
            }
        } catch (e: Exception) {
            Timber.d("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", e)
            items.forEach { item ->
                item.syncStatus = SyncStatus.FAILED
                progressSyncQueueDao.update(item)
            }
            return false
        }
    }

    private suspend fun processStatisticsItems(items: List<ProgressSyncQueueEntity>): Boolean {
        Timber.d("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ ${items.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
        try {
            val updateRequests = items.mapNotNull { item ->
                val statsEntity = practiceStatisticsDao.getStatisticsByEgeNumberSync(item.itemId)
                statsEntity?.let {
                    PracticeStatisticSyncDto(
                        egeNumber = it.egeNumber,
                        totalAttempts = it.totalAttempts,
                        correctAttempts = it.correctAttempts,
                        lastAttemptDate = it.lastAttemptDate,
                        variantData = it.variantData
                    )
                }
            }

            if (updateRequests.isEmpty()) {
                Timber.d("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –≤ –ë–î.")
                items.forEach { item ->
                    item.syncStatus = SyncStatus.FAILED
                    progressSyncQueueDao.update(item)
                }
                return true
            }

            val userId = userDao.getFirstUser()?.getUserId()
            if (userId == null) {
                Timber.d("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                return false
            }
            val lastSyncTimestamp = getLastStatsSyncTimestamp() ?: 0L

            val request = PracticeStatisticsBranchRequest(
                userId = userId.toString(),
                lastKnownServerSyncTimestamp = lastSyncTimestamp,
                newOrUpdatedAggregatedStatistics = updateRequests,
                newAttempts = emptyList()
            )

            val response = practiceApiService.updatePracticeStatistics(request)
            
            Timber.d("üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: isSuccessful=${response.isSuccessful}, code=${response.code()}")

            if (response.isSuccessful) {
                val branchResponse = response.body()
                if (branchResponse != null) {
                    saveLastStatsSyncTimestamp(branchResponse.newServerSyncTimestamp)
                    Timber.d("üïí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ branch-–æ—Ç–≤–µ—Ç–∞: ${branchResponse.newServerSyncTimestamp}")
                }
                items.forEach { item ->
                    item.syncStatus = SyncStatus.SYNCED
                    progressSyncQueueDao.update(item)
                }
                Timber.d("Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                return true
            } else {
                Timber.d("Batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${response.code()} ${response.message()}")
                items.forEach { item ->
                    item.syncStatus = SyncStatus.FAILED
                    progressSyncQueueDao.update(item)
                }
                return false
            }
        } catch (e: Exception) {
            Timber.d("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è batch-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", e)
             items.forEach { item ->
                item.syncStatus = SyncStatus.FAILED
                progressSyncQueueDao.update(item)
            }
            return false
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param taskGroupId ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, task_group_1)
     * @param solvedTaskId ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     * @param syncImmediately –Ω—É–∂–Ω–æ –ª–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
     */
    suspend fun addSolvedTask(taskGroupId: String, solvedTaskId: String, syncImmediately: Boolean = false) = withContext(Dispatchers.IO) {
        try {
            var progressEntity = progressDao.getProgressByContentIdSync(taskGroupId)

            if (progressEntity == null) {
                Timber.d("–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≥—Ä—É–ø–ø—ã $taskGroupId –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                progressEntity = ProgressEntity()
                progressEntity.setContentId(taskGroupId)
                progressEntity.setPercentage(0)
                progressEntity.setCompleted(false)
                progressEntity.setLastAccessed(System.currentTimeMillis())
                progressEntity.setSolvedTaskIds("[]")

                progressDao.insert(progressEntity)
                Timber.d("–ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å ProgressEntity –¥–ª—è $taskGroupId —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                progressEntity = progressDao.getProgressByContentIdSync(taskGroupId)
                if (progressEntity == null) {
                    Timber.d("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å ProgressEntity –¥–ª—è $taskGroupId –ø–æ—Å–ª–µ insert.")
                    return@withContext false
                }
            }
            
            val currentSolved = progressEntity.getSolvedTaskIdsList().toMutableList()
            
            if (!currentSolved.contains(solvedTaskId)) {
                currentSolved.add(solvedTaskId)
                
                val totalTasksCount = getTotalTasksCount(taskGroupId)
                Timber.d("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã $taskGroupId: $totalTasksCount")
                
                val newPercentage = calculatePercentage(currentSolved.size, totalTasksCount)
                val newLastAccessed = System.currentTimeMillis()
                val newSolvedTaskIds = ProgressEntity.listToJsonString(currentSolved)
                
                progressEntity.setPercentage(newPercentage)
                progressEntity.setLastAccessed(newLastAccessed)
                progressEntity.setCompleted(newPercentage >= 100)
                progressEntity.setSolvedTaskIds(newSolvedTaskIds)
                
                progressDao.update(progressEntity)
                
                queueProgressUpdate(progressEntity, syncImmediately)
                
                Timber.d("–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ $solvedTaskId –≤ –≥—Ä—É–ø–ø—É $taskGroupId. –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: $newPercentage%")
                return@withContext true
            } else {
                Timber.d("–ó–∞–¥–∞–Ω–∏–µ $solvedTaskId —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ –≤ –≥—Ä—É–ø–ø–µ $taskGroupId")
                return@withContext false
            }
        } catch (e: Exception) {
            Timber.d("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è", e)
            return@withContext false
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π
     * @param taskGroupId ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
     */
    private fun getTotalTasksCount(taskGroupId: String): Int {
        try {
            val contentEntity = contentDao.getContentByIdSync(taskGroupId)

            if (contentEntity?.isDownloaded == true) {
                val egeNumber = taskGroupId.removePrefix("task_group_")
                val count = taskDao.getTaskCountByEgeNumberSync(egeNumber)
                if (count > 0) {
                    Timber.d("–ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ $count –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è $taskGroupId")
                    return count
                }
            }
            
            if (contentEntity != null && contentEntity.description != null) {
                val description = contentEntity.description
                Timber.d("–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è $taskGroupId: $description")
                
                val pattern = java.util.regex.Pattern.compile("(\\d+)\\s+(–∑–∞–¥–∞–Ω–∏–π|–∑–∞–¥–∞–Ω–∏–µ|–∑–∞–¥–∞–Ω–∏—è)")
                val matcher = pattern.matcher(description)
                
                if (matcher.find()) {
                    val countStr = matcher.group(1)
                    val count = countStr.toInt()
                    Timber.d("–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è $taskGroupId: $count")
                    return count
                }
                
                val numberPattern = java.util.regex.Pattern.compile("(\\d+)")
                val numberMatcher = numberPattern.matcher(description)
                
                if (numberMatcher.find()) {
                    val countStr = numberMatcher.group(1)
                    val count = countStr.toInt()
                    Timber.d("–ò–∑–≤–ª–µ—á–µ–Ω–æ —á–∏—Å–ª–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è $taskGroupId: $count")
                    return count
                }
            }
            
            Timber.d("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è $taskGroupId")
            val groupNumber = taskGroupId.replace("task_group_", "").toIntOrNull() ?: 0
            
            return when (groupNumber) {
                1 -> 10
                2 -> 8
                3 -> 15
                4 -> 12
                5 -> 99
                6 -> 8
                7 -> 10
                8 -> 12
                9 -> 15
                10 -> 10
                11 -> 8
                12 -> 10
                13 -> 12
                14 -> 8
                15 -> 10
                16 -> 12
                17 -> 10
                18 -> 12
                19 -> 10
                20 -> 8
                21 -> 10
                22 -> 8
                23 -> 15
                24 -> 10
                25 -> 10
                26 -> 12
                27 -> 1
                else -> 10
            }
        } catch (e: Exception) {
            Timber.d("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è $taskGroupId", e)
            return 10
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     * @param solvedCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     * @param totalCount –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 0 –¥–æ 100)
     */
    private fun calculatePercentage(solvedCount: Int, totalCount: Int): Int {
        if (totalCount <= 0) return 0
        return ((solvedCount.toFloat() / totalCount) * 100).toInt().coerceIn(0, 100)
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ DTO –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    private fun toProgressUpdateDto(progressEntity: ProgressEntity): ProgressUpdateRequest {
        val solvedTaskIds = progressEntity.getSolvedTaskIdsList().takeIf { it.isNotEmpty() }
        
        return ProgressUpdateRequest(
            contentId = progressEntity.getContentId(),
            percentage = progressEntity.getPercentage(),
            completed = progressEntity.isCompleted(),
            timestamp = progressEntity.getLastAccessed(),
            solvedTaskIds = solvedTaskIds
        )
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫ ID —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï–ì–≠.
     * @param categoryId ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "2", ... "27")
     * @return Flow, –∫–æ—Ç–æ—Ä—ã–π —ç–º–∏—Ç–∏—Ç —Å–ø–∏—Å–æ–∫ ID —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (List<String>)
     */
    fun getSolvedTaskIdsForEgeCategory(categoryId: String): kotlinx.coroutines.flow.Flow<List<String>> {
        val contentId = "task_group_$categoryId"

        return progressDao.getProgressByContentId(contentId).asFlow()
            .map { entity: ProgressEntity? ->
                if (entity != null && !entity.getSolvedTaskIds().isNullOrEmpty()) {
                    try {
                        parseJsonSolvedTaskIds(entity.getSolvedTaskIds()) ?: emptyList<String>()
                    } catch (e: org.json.JSONException) {
                        Timber.d("–û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞ solvedTaskIds –¥–ª—è contentId $contentId: ${entity.getSolvedTaskIds()}", e)
                        emptyList<String>()
                    } catch (e: Exception) {
                        Timber.d("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ solvedTaskIds –¥–ª—è contentId $contentId: ${entity.getSolvedTaskIds()}", e)
                        emptyList<String>()
                    }
                } else {
                    emptyList<String>()
                }
            }
    }

    suspend fun queueStatisticsUpdate(statistics: PracticeStatisticsEntity, syncImmediately: Boolean = false): Long = withContext(Dispatchers.IO) {
        val timestamp = System.currentTimeMillis()
        val userId = userDao.getFirstUser()?.getUserId() ?: -1L

        if (userId == -1L) {
            Timber.d("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å")
            return@withContext -1L
        }

        Timber.d("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: itemId=${statistics.egeNumber}")

        val syncQueueEntity = ProgressSyncQueueEntity(
            statistics.egeNumber,
            ProgressSyncQueueEntity.ITEM_TYPE_STATISTICS,
            0,
            false,
            timestamp,
            userId,
            SyncStatus.PENDING,
            "[]"
        )

        val existingItem = progressSyncQueueDao.getItemByItemId(statistics.egeNumber)
        if (existingItem != null) {
            syncQueueEntity.setId(existingItem.id)
            Timber.d("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: itemId=${statistics.egeNumber}, id=${existingItem.id}")
        }

        val id = progressSyncQueueDao.insert(syncQueueEntity)
        Timber.d("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å: itemId=${statistics.egeNumber}, id=$id")

        if (syncImmediately) {
            syncNow(true)
        }

        return@withContext id
    }
} 